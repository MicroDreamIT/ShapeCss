import { attachScopes, createFilter } from 'rollup-pluginutils';
import { sep } from 'path';
import { walk } from 'estree-walker';
import { parse } from 'acorn';
import MagicString from 'magic-string';

var reservedWords = 'break case class catch const continue debugger default delete do else export extends finally for function if import in instanceof let new return super switch this throw try typeof var void while with yield enum await implements package protected static interface private public'.split( ' ' );
var builtins = 'Infinity NaN undefined null true false eval uneval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent encodeURI encodeURIComponent escape unescape Object Function Boolean Symbol Error EvalError InternalError RangeError ReferenceError SyntaxError TypeError URIError Number Math Date String RegExp Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array Map Set WeakMap WeakSet SIMD ArrayBuffer DataView JSON Promise Generator GeneratorFunction Reflect Proxy Intl'.split( ' ' );

var blacklisted = Object.create( null );
reservedWords.concat( builtins ).forEach( function (word) { return blacklisted[ word ] = true; } );

function makeLegalIdentifier ( str ) {
	str = str
		.replace( /-(\w)/g, function ( _, letter ) { return letter.toUpperCase(); } )
		.replace( /[^$_a-zA-Z0-9]/g, '_' );

	if ( /\d/.test( str[0] ) || blacklisted[ str ] ) { str = "_" + str; }

	return str;
}

function escape ( str ) {
	return str.replace( /[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&' );
}

function isReference ( node, parent ) {
	if ( node.type === 'MemberExpression' ) {
		return !node.computed && isReference( node.object, node );
	}

	if ( node.type === 'Identifier' ) {
		// TODO is this right?
		if ( parent.type === 'MemberExpression' ) { return parent.computed || node === parent.object; }

		// disregard the `bar` in { bar: foo }
		if ( parent.type === 'Property' && node !== parent.value ) { return false; }

		// disregard the `bar` in `class Foo { bar () {...} }`
		if ( parent.type === 'MethodDefinition' ) { return false; }

		// disregard the `bar` in `export { foo as bar }`
		if ( parent.type === 'ExportSpecifier' && node !== parent.local ) { return; }

		return true;
	}
}

function flatten ( node ) {
	var name;
	var parts = [];

	while ( node.type === 'MemberExpression' ) {
		parts.unshift( node.property.name );
		node = node.object;
	}

	name = node.name;
	parts.unshift( name );

	return { name: name, keypath: parts.join( '.' ) };
}

function assign ( target, source ) {
	Object.keys( source ).forEach( function (key) {
		target[ key ] = source[ key ];
	});
	return target;
}

function isArray ( thing ) {
	return Object.prototype.toString.call( thing ) === '[object Array]';
}

function tryParse ( code, id ) {
	try {
		return parse( code, {
			ecmaVersion: 6,
			sourceType: 'module'
		});
	} catch ( err ) {
		console.warn( ("rollup-plugin-inject: failed to parse " + id + ". Consider restricting the plugin to particular files via options.include") );
	}
}

function inject ( options ) {
	if ( !options ) { throw new Error( 'Missing options' ); }

	var filter = createFilter( options.include, options.exclude );

	var modules;

	if ( options.modules ) {
		modules = options.modules;
	} else {
		modules = assign( {}, options );
		delete modules.include;
		delete modules.exclude;
	}

	// Fix paths on Windows
	if ( sep !== '/' ) {
		Object.keys( modules ).forEach( function (key) {
			var module = modules[ key ];

			modules[ key ] = isArray( module ) ?
				[ module[0].split( sep ).join( '/' ), module[1] ] :
				module.split( sep ).join( '/' );
		});
	}

	var firstpass = new RegExp( ("(?:" + (Object.keys( modules ).map( escape ).join( '|' )) + ")"), 'g' );
	var sourceMap = options.sourceMap !== false;

	return {
		name: 'inject',

		transform: function transform ( code, id ) {
			if ( !filter( id ) ) { return null; }
			if ( code.search( firstpass ) == -1 ) { return null; }

			if ( sep !== '/' ) { id = id.split( sep ).join( '/' ); }

			var ast = tryParse( code, id );
			if ( !ast ) { return null; }

			// analyse scopes
			var scope = attachScopes( ast, 'scope' );

			var imports = {};
			ast.body.forEach( function (node) {
				if ( node.type === 'ImportDeclaration' ) {
					node.specifiers.forEach( function (specifier) {
						imports[ specifier.local.name ] = true;
					});
				}
			});

			var magicString = new MagicString( code );

			var newImports = {};

			function handleReference ( node, name, keypath ) {
				if ( keypath in modules && !scope.contains( name ) && !imports[ name ] ) {
					var module = modules[ keypath ];
					if ( typeof module === 'string' ) { module = [ module, 'default' ]; }

					// prevent module from importing itself
					if ( module[0] === id ) { return; }

					var hash = keypath + ":" + (module[0]) + ":" + (module[1]);

					var importLocalName = name === keypath ? name : makeLegalIdentifier( ("$inject_" + keypath) );

					if ( !newImports[ hash ] ) {
						if ( module[1] === '*' ) {
							newImports[ hash ] = "import * as " + importLocalName + " from '" + (module[0]) + "';";
						} else {
							newImports[ hash ] = "import { " + (module[1]) + " as " + importLocalName + " } from '" + (module[0]) + "';";
						}
					}

					if ( name !== keypath ) {
						magicString.overwrite( node.start, node.end, importLocalName, true );
					}

					return true;
				}
			}

			walk( ast, {
				enter: function enter ( node, parent ) {
					if ( sourceMap ) {
						magicString.addSourcemapLocation( node.start );
						magicString.addSourcemapLocation( node.end );
					}

					if ( node.scope ) { scope = node.scope; }

					// special case â€“ shorthand properties. because node.key === node.value,
					// we can't differentiate once we've descended into the node
					if ( node.type === 'Property' && node.shorthand ) {
						var name = node.key.name;
						handleReference( node, name, name );
						return this.skip();
					}

					if ( isReference( node, parent ) ) {
						var ref = flatten( node );
						var name$1 = ref.name;
						var keypath = ref.keypath;
						var handled = handleReference( node, name$1, keypath );
						if ( handled ) { return this.skip(); }
					}
				},
				leave: function leave ( node ) {
					if ( node.scope ) { scope = scope.parent; }
				}
			});

			var keys = Object.keys( newImports );
			if ( !keys.length ) { return null; }

			var importBlock = keys.map( function (hash) { return newImports[ hash ]; } ).join( '\n\n' );
			magicString.prepend( importBlock + '\n\n' );

			return {
				code: magicString.toString(),
				map: sourceMap ? magicString.generateMap() : null
			};
		}
	};
}

export default inject;
